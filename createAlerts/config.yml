---
#GLOBAL
GLOBAL:
  http_proxy: 'INSERT HERE'
  https_proxy: 'INSERT HERE'
  admin_key: '<ADMIN KEY>'
  inc_pref: 'PER_CONDITION'
  policy_name: '<YOUR_POLICY>'

#emails to assign to policy, if email in list doesn't exist-- it will get created as a new notification channel and assigned to policy created above.
emails_to_add: []

#PagerDuty channel to create and assign to policy; Leave blank if not being used.
pagerduty_title: ''
pagerduty_key: ''


#APM - Each condition name, must have a corresponding, metric, duration, critical threshold, warning threshold, and operator.
#***NOTE: Each application (app_name) specified will get assigned to ALL conditions listed.
#For more information on available metric types, visit https://docs.newrelic.com/docs/alerts/rest-api-alerts/new-relic-alerts-rest-api/alerts-conditions-api-field-names#metric
#IF apm_condition_names is NULL [], this section will be ignored
APM:
  app_names: ['Snakes-Java', 'App2']  #***Match your New Relic APM config file app_name (case-sensitive)
  metric_types: ['apm_app_metric', 'apm_app_metric', 'apm_app_metric'] #should be the default
  apm_condition_names: ['Apdex - Low', 'Error Rate - High', 'Current Thread Count - Low']
  apm_condition_metrics: ['apdex', 'error_percentage', 'user_defined']
  apm_condition_duration: [15, 10, 15]
  apm_condition_critT: [.7, 5, 1]
  apm_condition_warnT: [.85, 3, 2]
  apm_cond_operators: ['below', 'above', 'below']
  #Use apm_custom fields only if 'user_defined' is specified for an apm_condition_metric above
  apm_custom_metrics: ['JMX/Catalina/ThreadPool/"ajp-nio-8009"/currentThreadCount'] #actual metric to measure
  apm_value_functions: ['average'] #average, min, max, total, sample_size.


#INFRA - Each condition name must have a corresponding eventType, filterClause, threshold, etc (all fields required)
#For more information on available types or for more assistance, vist https://docs.newrelic.com/docs/infrastructure/new-relic-infrastructure/infrastructure-alert-conditions/rest-api-calls-new-relic-infrastructure-alerts
#IF infra_condition_names is NULL [], this section will be ignored
INFRA:
  metric_types: [infra_metric, infra_metric, infra_metric] #infra_host_not_reporting, infra_metric, infra_process_running
  infra_condition_names: [] #['CPU % (High)', 'Disk Utilization (High)', 'Memory % (High)']
  eventType: [SystemSample, SystemSample, SystemSample] # Data bucket according to Insights- https://docs.newrelic.com/docs/infrastructure/new-relic-infrastructure/data-instrumentation/default-infrastructure-attributes-events
  filterClause: ["`technology` LIKE '%tomcat%'", "`technology` LIKE '%tomcat%'", "`technology` LIKE '%tomcat%'"]
  selectValue: [cpuPercent, diskUsedPercent, memoryUsedPercent]
  infra_comparison: [above, above, above] #above, below, equal
  criticalT: [90, 90, 90]
  warningT: [85, 85, 85]
  crit_durations: [10, 10, 10]
  warn_durations: [15, 15, 15]

#NRQL - Each condition name must have a corresponding duration, operator, etc.
#For more information on NRQL Alerting visit -- https://docs.newrelic.com/docs/alerts/new-relic-alerts/defining-conditions/create-alert-conditions-nrql-queries
#If nrql_condition_names is Null [], this section will be ignored.
NRQL:
  nrql_condition_names: ['NRQL-Test'] #Title for conditions
  nrql_durations: [15] # Duration of the condition to fire event after threshold breached
  nrql_operators: [above] # above, below, equal
  nrql_priority: [critical] # critical or warning
  nrql_thresholds: [5] # value to check query against
  nrql_time_functions: [all] #any or all
  nrql_value_functions: [single_value] #single_value or sum;
  nrql_queries: [
  "SELECT average(cpuPercent) FROM SystemSample where hostname = 'myhost'"
  ] #NRQL queries to be checked.
  nrql_since_values: [3] #time which query is checked (1-5 minutes), Default is 3;
